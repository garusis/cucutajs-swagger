swagger: '2.0'
info:
  description: This an swagger example for CucutaJS
  version: 1.0.0
  title: CucutaJS Bookstore
host: localhost:4000
basePath: /v1
tags:
  - name: book
    description: Everything about books
schemes:
  - http
paths:
  /book:
    get:
      tags:
        - book
      summary: List Books
      description: List all Books registered in the Bookstore
      operationId: getBooks
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
    post:
      tags:
        - book
      summary: Add a new book to the store
      description: ''
      operationId: addBook
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Book object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Book'
      responses:
        '422':
          description: Invalid input
  /book/findByTags:
    get:
      tags:
        - book
      summary: Finds Books by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: findBooksByTags
      produces:
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        '400':
          description: Invalid tag value
      deprecated: true
  '/book/{bookId}':
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      produces:
        - application/json
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
    put:
      tags:
        - book
      summary: Update an existing book
      description: ''
      operationId: updateBook
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: bookId
          in: path
          description: ID of book to update
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: New book data
          required: true
          schema:
            $ref: '#/definitions/Book'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
        '422':
          description: Validation exception
definitions:
  Book:
    type: object
    required:
      - isbn
      - title
      - author
    properties:
      qty:
        type: integer
        default: 1
        minimum: 1
        description: How many books exists in the Bookstore
      isbn:
        type: integer
      title:
        type: string
        description: book title
        example: Le Petit Prince
      author:
        type: string
        description: book's author
        example: Antoine de Saint-Exup√©ry
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'